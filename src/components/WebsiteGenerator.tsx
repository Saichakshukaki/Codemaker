import React, { useState } from 'react';
import { Lightbulb, Code, Bug, Rocket, Github, ExternalLink } from 'lucide-react';

interface WebsiteGeneratorProps {
  systemStatus: any;
  setSystemStatus: (status: any) => void;
}

export function WebsiteGenerator({ systemStatus, setSystemStatus }: WebsiteGeneratorProps) {
  const [generationStep, setGenerationStep] = useState(0);
  const [currentIdea, setCurrentIdea] = useState<any>(null);
  const [loading, setLoading] = useState(false);

  const generateFromBackend = async () => {
    setLoading(true);
    setGenerationStep(1); // Step 1: Idea generation

    try {
      const res = await fetch("https://codemaker-backend.onrender.com/generate", {
        method: "POST"
      });
      const data = await res.json();

      setCurrentIdea({
        name: data.idea,
        description: "Generated by AI backend",
        category: "random",
        technologies: ["HTML", "CSS", "JavaScript"],
        estimatedTime: "3 hours",
        features: ["Ready to use", "Simple layout", "Interactive"],
        files: data.files
      });

      setGenerationStep(4); // Jump to last step for demo purposes
    } catch (error) {
      alert("Error talking to backend: " + error);
    }

    setLoading(false);
  };

  const steps = [
    { id: 1, name: 'Idea Generation', icon: Lightbulb, description: 'AI generates creative website concept' },
    { id: 2, name: 'Code Generation', icon: Code, description: 'Full stack code generation with best practices' },
    { id: 3, name: 'Testing & Debugging', icon: Bug, description: 'Automated testing and bug fixes' },
    { id: 4, name: 'Deployment', icon: Rocket, description: 'Deploy to GitHub Pages automatically' }
  ];

  return (
    <div className="space-y-6">
      <div className="bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700">
        <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
          AI Website Generator
        </h2>
        <p className="text-gray-600 dark:text-gray-400 mb-6">
          Click the button to let AI generate a full website for you!
        </p>

        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          {steps.map((step) => (
            <div key={step.id} className={`p-4 rounded-lg border-2 ${
              generationStep >= step.id
                ? 'border-blue-200 bg-blue-50 dark:border-blue-700 dark:bg-blue-900/20'
                : 'border-gray-200 bg-gray-50 dark:border-gray-700 dark:bg-gray-800'
            }`}>
              <div className="flex items-center space-x-3 mb-2">
                <div className={`p-2 rounded-lg ${
                  generationStep >= step.id
                    ? 'bg-blue-600 text-white'
                    : 'bg-gray-300 text-gray-600 dark:bg-gray-600 dark:text-gray-300'
                }`}>
                  <step.icon className="w-4 h-4" />
                </div>
                <span className="font-medium text-gray-900 dark:text-white">{step.name}</span>
              </div>
              <p className="text-sm text-gray-600 dark:text-gray-400">{step.description}</p>
            </div>
          ))}
        </div>
      </div>

      {/* Generated Idea Display */}
      {currentIdea && (
        <div className="bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
              Generated Website: {currentIdea.name}
            </h3>
            <span className="px-3 py-1 bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 rounded-full text-sm">
              {currentIdea.category}
            </span>
          </div>

          <p className="mb-4 text-gray-600 dark:text-gray-300">{currentIdea.description}</p>

          <h4 className="text-md font-semibold text-gray-900 dark:text-white mb-1">Features:</h4>
          <ul className="list-disc list-inside text-sm text-gray-600 dark:text-gray-400 mb-4">
            {currentIdea.features.map((feature: string, index: number) => (
              <li key={index}>{feature}</li>
            ))}
          </ul>

          <pre className="text-xs bg-black text-white p-4 rounded mb-4 overflow-auto">
            {JSON.stringify(currentIdea.files, null, 2)}
          </pre>

          <div className="flex space-x-2">
            <button className="flex items-center space-x-2 px-4 py-2 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors">
              <Github className="w-4 h-4" />
              <span>View Code</span>
            </button>
            <button className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
              <ExternalLink className="w-4 h-4" />
              <span>Live Demo</span>
            </button>
          </div>
        </div>
      )}

      <div className="text-center">
        <button
          onClick={generateFromBackend}
          disabled={loading}
          className="inline-flex items-center space-x-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors"
        >
          <Lightbulb className="w-5 h-5" />
          <span>{loading ? "Generating..." : "Generate New Website"}</span>
        </button>
      </div>
    </div>
  );
}
